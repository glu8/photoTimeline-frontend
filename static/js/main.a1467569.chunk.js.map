{"version":3,"sources":["components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["GoogleApiWrapper","apiKey","props","initialCenter","lat","timelineData","latitude","lng","longitude","useEffect","setCoordinates","react_default","a","createElement","google_maps_react_dist","google","onChange","_ref","center","zoom","setZoom","style","width","height","coordinates","streetViewControl","fullscreenControl","options","styles","stylers","saturation","gamma","map","group","index1","imageMetadata","object","index2","console","log","key","_id","id","position","onClick","standardZoom","scrollTimelineItemIntoView","backgroundColor","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"kXA0FeA,2BAAiB,CAC5BC,OAAQ,2CADGD,CAvFf,SAAsBE,GAElB,IAAMC,EAAgB,CAClBC,IAAKF,EAAMG,aAAa,GAAGC,SAC3BC,IAAKL,EAAMG,aAAa,GAAGG,WAkE/B,OA/DAC,oBAAU,WACNP,EAAMQ,eAAeP,IACtB,IA8DCQ,EAAAC,EAAAC,cAACC,EAAA,IAAD,CACIC,OAAQb,EAAMa,OACdC,SAzDR,SAAAC,GAAqC,IAAhBC,EAAgBD,EAAhBC,OAAQC,EAAQF,EAARE,KACzBjB,EAAMQ,eAAeQ,GACrBhB,EAAMkB,QAAQD,IAwDVA,KAAMjB,EAAMiB,KACZE,MAhEU,CACdC,MAAO,OACPC,OAAQ,QA+DJpB,cAAeD,EAAMsB,YACrBN,OAAQhB,EAAMsB,YACdC,mBAAmB,EACnBC,mBAAmB,EACnBC,QAAS,CAAEC,OAAQ,CAAC,CAAEC,QAAS,CAAC,CAAEC,WAAc,IAAM,CAAEC,MAAS,SAlC9D7B,EAAMG,aAAa2B,IAAI,SAACC,EAAOC,GAClC,OAAOD,EAAME,cAAcH,IAAI,SAACI,EAAQC,GAEpC,OADAC,QAAQC,IAAIH,GACLzB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQ0B,IAAKJ,EAAOK,IAAM,UAAWC,GAAIN,EAAOK,IAAM,UAAWE,SAAU,CAC9EvC,IAAKgC,EAAO9B,SACZC,IAAK6B,EAAO5B,WACboC,QAAS,WACR1C,EAAMQ,eAAe,CACjBN,IAAKgC,EAAO9B,SACZC,IAAK6B,EAAO5B,YAEhBN,EAAMkB,QAAQlB,EAAM2C,cACpB3C,EAAM4C,2BAA2BZ,IAGjCb,MAAO,CACH0B,gBAAiB,4BCvB1BC,MAhCf,WACE,OACErC,EAAAC,EAAAC,cAAA,4BCAWoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAArC,GAAiD,IAA9CuC,EAA8CvC,EAA9CuC,OAAQC,EAAsCxC,EAAtCwC,OAAQC,EAA8BzC,EAA9ByC,OAAQC,EAAsB1C,EAAtB0C,OAAQC,EAAc3C,EAAd2C,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SAEpDC,OACHtD,EAAAC,EAAAC,cAACqD,EAAD,OAMFjB","file":"static/js/main.a1467569.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n\nfunction MapContainer(props) {\n\n    const initialCenter = {\n        lat: props.timelineData[0].latitude,\n        lng: props.timelineData[0].longitude\n    }\n\n    useEffect(() => {\n        props.setCoordinates(initialCenter)\n    }, [])\n\n    const mapStyles = {\n        width: '100%',\n        height: '100%',\n    };\n\n    function _onChange({ center, zoom }) {\n        props.setCoordinates(center)\n        props.setZoom(zoom)\n    }\n\n    /*\n    function displayMarkers() {\n        return props.timelineData.map((object, index) => {\n            return <Marker key={object._id + \"_marker\"} id={object._id + \"_marker\"} position={{\n                lat: object.latitude,\n                lng: object.longitude\n            }} onClick={() => {\n                props.setCoordinates({\n                    lat: object.latitude,\n                    lng: object.longitude\n                })\n                props.setZoom(props.standardZoom)\n                props.scrollTimelineItemIntoView(index)\n            }}\n\n                style={{\n                    backgroundColor: 'blue'\n                }}\n\n            />\n        })\n    }\n    */\n\n    function displayMarkers() {\n        return props.timelineData.map((group, index1) => {\n            return group.imageMetadata.map((object, index2) => {\n                console.log(object)\n                return <Marker key={object._id + \"_marker\"} id={object._id + \"_marker\"} position={{\n                    lat: object.latitude,\n                    lng: object.longitude\n                }} onClick={() => {\n                    props.setCoordinates({\n                        lat: object.latitude,\n                        lng: object.longitude\n                    })\n                    props.setZoom(props.standardZoom)\n                    props.scrollTimelineItemIntoView(index1)\n                }}\n\n                    style={{\n                        backgroundColor: 'blue'\n                    }}\n\n                />\n            })\n        })\n    }\n\n    return (\n        <Map\n            google={props.google}\n            onChange={_onChange}\n            zoom={props.zoom}\n            style={mapStyles}\n            initialCenter={props.coordinates}\n            center={props.coordinates}\n            streetViewControl={false}\n            fullscreenControl={false}\n            options={{ styles: [{ stylers: [{ 'saturation': 50 }, { 'gamma': 0.5 }] }] }}\n        >\n            {displayMarkers()}\n        </Map>\n    )\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyCQQQZKC99E52XiY4bd1eZI_VOG2RFqsJ8'\n})(MapContainer);\n\n/*\nexport default function Map() {\n    const mapContainer = useRef(null);\n    const map = useRef(null);\n    const [lng] = useState(139.753);\n    const [lat] = useState(35.6844);\n    const [zoom] = useState(14);\n    const [API_KEY] = useState('VmBZxlaZKIBQIYAMxmWj');\n\n\n    useEffect(() => {\n        if (map.current) return; //stops map from intializing more than once\n        map.current = new maplibregl.Map({\n            container: mapContainer.current,\n            style: `https://api.maptiler.com/maps/streets/style.json?key=${API_KEY}`,\n            center: [lng, lat],\n            zoom: zoom\n        });\n    });\n\n    return (\n        <div className=\"map-wrap\">\n            <div ref={mapContainer} className=\"map\" />\n        </div>\n    );\n\n\n} */","import React from 'react';\nimport './App.css';\nimport UploadImages from './components/UploadImages';\nimport PhotoTrail from './components/PhotoTrail';\nimport TimelineList from './components/TimelineList';\nimport TimelineEditList from './components/TimelineEditList';\nimport NavBar from './components/NavBar';\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div>Hello World!</div>\n    /*\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\" style={{ position: 'fixed', height: '100%', width: '100%' }}>\n        <NavBar />\n        <div className=\"PhotoTrailWrapper\" style={{ position: 'fixed', height: '96%', width: '100%', bottom: 0 }}>\n          <Routes>\n            <Route path=\"/photoTimeline/:timelineID\" element={\n              <PhotoTrail />\n            } />\n            <Route path=\"/upload/:timelineID\" element={\n              <UploadImages />\n            } />\n            <Route path=\"/timelineList\" element={\n              <TimelineList />\n            } />\n            <Route path=\"/timelineEditList\" element={\n              <TimelineEditList />\n            } />\n            <Route path=\"*\" element={<Navigate to=\"/timelineList\" replace />} />\n          </Routes>\n        </div>\n      </div>\n    </BrowserRouter>*/\n\n  );\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}